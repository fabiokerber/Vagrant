Vagrant.configure('2') do |config|

#    $script_ansible = <<-SCRIPT
#        sudo -i && echo "export PATH=/root/.local/bin:${PATH}" >> ~/.bashrc && source ~/.bashrc
#    SCRIPT

    config.env.enable
    config.vm.boot_timeout = 1200

    config.vm.define 'ansible' do |ansible|

        ansible.vm.box = 'debian/bullseye64'
        ansible.vm.hostname = 'ansible.awx.lab'
        ansible.vm.network 'public_network', ip: ENV['ANSIBLE_IP'], bridge: ENV['INTERFACE']

        ansible.vm.provision 'shell', inline: 'sudo timedatectl set-timezone America/Sao_Paulo'
        ansible.vm.provision 'shell', inline: 'sudo apt update'

#        ansible.vm.provision 'shell', inline: $script_ansible

        ansible.vm.provision 'shell', inline: 'sudo apt install -y libc6-dev vim git curl'
        ansible.vm.provision 'shell', inline: 'sudo apt install -y build-essential checkinstall'
        ansible.vm.provision 'shell', inline: 'sudo apt install -y libreadline-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev'
        
        ansible.vm.provision 'shell', inline: 'wget -O /tmp/Python-3.9.13.tgz  https://www.python.org/ftp/python/3.9.13/Python-3.9.13.tgz'
        ansible.vm.provision 'shell', inline: 'tar xzf /tmp/Python-3.9.13.tgz -C /usr/local/src/'
        ansible.vm.provision 'shell', inline: 'cd /usr/local/src/Python-3.9.13/ && ./configure --enable-optimizations && make altinstall'

        ansible.vm.provision 'shell', inline: 'pip3.9 install --upgrade pip && pip3.9 install --upgrade setuptools'
        ansible.vm.provision 'shell', inline: 'pip3.9 install setuptools_rust wheel && pip3.9 install ansible'
        ansible.vm.provision 'shell', inline: 'pip3.9 install ansible-tower-cli'
        
        ansible.vm.provision 'shell', inline: 'sudo mkdir -p /etc/ansible'
        ansible.vm.provision 'shell', inline: 'sudo touch {/var/log/ansible.log,/etc/ansible/hosts}'
        ansible.vm.provision 'shell', inline: 'sudo chmod 777 /var/log/ansible.log'
        ansible.vm.provision 'shell', inline: 'sudo wget -O /etc/ansible/ansible.cfg https://raw.githubusercontent.com/fabiokerber/Vagrant/main/ansible_elk_grafana/files/ansible.cfg'

        ansible.vm.provision 'shell', inline: 'pip3.9 install ansible ara[server]'
        ansible.vm.provision 'shell', inline: 'export ANSIBLE_CALLBACK_PLUGINS="$(python3 -m ara.setup.callback_plugins)"'
        ansible.vm.provision 'shell', inline: 'export ARA_SETTINGS="/root/.ara/server/settings.yaml"'
        ansible.vm.provision 'shell', inline: 'ara-manage migrate'

        ansible.vm.provision 'shell', inline: 'echo "$IP runner.awx.lab" >> /etc/hosts', env: {"IP" => ENV['RUNNER_IP']}
        ansible.vm.provision 'shell', inline: 'echo "$IP log.awx.lab" >> /etc/hosts', env: {"IP" => ENV['LOG_IP']}

        ansible.vm.provider 'virtualbox' do |vb|
            vb.memory = 2048
            vb.cpus = 2
            vb.name = 'ansible.awx.lab'
            vb.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']

        end

    end

    config.vm.define 'grafana_elk' do |grafana_elk|

        grafana_elk.vm.box = 'debian/bullseye64'
        grafana_elk.vm.hostname = 'log.awx.lab'
        grafana_elk.vm.network 'public_network', ip: ENV['LOG_IP'], bridge: ENV['INTERFACE']

        grafana_elk.vm.provision 'shell', inline: 'sudo timedatectl set-timezone America/Sao_Paulo'
        grafana_elk.vm.provision 'shell', inline: 'sudo apt update'

        grafana_elk.vm.provision 'shell', inline: 'sudo apt install -y vim git'
        grafana_elk.vm.provision 'shell', inline: 'sudo apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common'
        grafana_elk.vm.provision 'shell', inline: 'curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -'
        grafana_elk.vm.provision 'shell', inline: 'sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"'
        grafana_elk.vm.provision 'shell', inline: 'sudo apt update'
        grafana_elk.vm.provision 'shell', inline: 'sudo apt install docker-ce'

        grafana_elk.vm.provision 'shell', inline: 'sudo mkdir -p /home/vagrant/volumes/grafana'
        grafana_elk.vm.provision 'shell', inline: 'sudo docker network create grafana-net'
        grafana_elk.vm.provision 'shell', inline: 'sudo docker run -d --user 1000 -v /home/vagrant/volumes/grafana/:/var/lib/grafana -p 3000:3000 --restart always --name=grafana --network=grafana-net grafana/grafana'

####################################
# INSTALAR/CONFIGURAR ELK
####################################

        grafana_elk.vm.provision 'shell', inline: 'echo "$IP ansible.awx.lab" >> /etc/hosts', env: {"IP" => ENV['ANSIBLE_IP']}
        grafana_elk.vm.provision 'shell', inline: 'echo "$IP runner.awx.lab" >> /etc/hosts', env: {"IP" => ENV['RUNNER_IP']} 

        grafana_elk.vm.provider 'virtualbox' do |vb|
            vb.memory = 4096
            vb.cpus = 4
            vb.name = 'log.awx.lab'
            vb.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']

        end

    end

    config.vm.define 'runner' do |runner|

        runner.vm.box = 'debian/bullseye64'
        runner.vm.hostname = 'runner.awx.lab'
        runner.vm.network 'public_network', ip: ENV['RUNNER_IP'], bridge: ENV['INTERFACE']

        runner.vm.provision 'shell', inline: 'sudo timedatectl set-timezone America/Sao_Paulo'
        runner.vm.provision 'shell', inline: 'sudo apt update'

        runner.vm.provision 'shell', inline: 'sudo apt install -y libc6-dev vim git'
        runner.vm.provision 'shell', inline: 'sudo apt install -y build-essential checkinstall'
        runner.vm.provision 'shell', inline: 'sudo apt install -y libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev'

        runner.vm.provision 'shell', inline: 'wget -O /tmp/Python-3.9.13.tgz  https://www.python.org/ftp/python/3.9.13/Python-3.9.13.tgz'
        runner.vm.provision 'shell', inline: 'tar xzf /tmp/Python-3.9.13.tgz -C /usr/local/src/'
        runner.vm.provision 'shell', inline: 'cd /usr/local/src/Python-3.9.13/ && ./configure --enable-optimizations && make altinstall'

        runner.vm.provision 'shell', inline: 'pip3.9 install --upgrade pip && pip3.9 install --upgrade setuptools'
        runner.vm.provision 'shell', inline: 'pip3.9 install setuptools_rust wheel && pip3.9 install ansible-runner'
        runner.vm.provision 'shell', inline: 'pip3.9 install ansible-tower-cli'

        runner.vm.provision 'shell', inline: 'echo "$IP ansible.awx.lab" >> /etc/hosts', env: {"IP" => ENV['ANSIBLE_IP']}
        runner.vm.provision 'shell', inline: 'echo "$IP log.awx.lab" >> /etc/hosts', env: {"IP" => ENV['LOG_IP']}

        runner.vm.provider 'virtualbox' do |vb|
            vb.memory = 2048
            vb.cpus = 2
            vb.name = 'runner.awx.lab'
            vb.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']

        end

    end

end